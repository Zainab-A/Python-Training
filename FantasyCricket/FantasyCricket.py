# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FantasyCricket.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from asyncio.windows_events import NULL
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(908, 643)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label)
        self.le1 = QtWidgets.QLineEdit(self.centralwidget)
        self.le1.setObjectName("le1")
        self.horizontalLayout_4.addWidget(self.le1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_4.addWidget(self.label_2)
        self.le2 = QtWidgets.QLineEdit(self.centralwidget)
        self.le2.setObjectName("le2")
        self.horizontalLayout_4.addWidget(self.le2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.le3 = QtWidgets.QLineEdit(self.centralwidget)
        self.le3.setObjectName("le3")
        self.horizontalLayout_4.addWidget(self.le3)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.le4 = QtWidgets.QLineEdit(self.centralwidget)
        self.le4.setObjectName("le4")
        self.horizontalLayout_4.addWidget(self.le4)
        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rb1 = QtWidgets.QRadioButton(self.groupBox)
        self.rb1.setObjectName("rb1")
        self.horizontalLayout.addWidget(self.rb1)
        self.rb2 = QtWidgets.QRadioButton(self.groupBox)
        self.rb2.setObjectName("rb2")
        self.horizontalLayout.addWidget(self.rb2)
        self.rb3 = QtWidgets.QRadioButton(self.groupBox)
        self.rb3.setObjectName("rb3")
        self.horizontalLayout.addWidget(self.rb3)
        self.rb4 = QtWidgets.QRadioButton(self.groupBox)
        self.rb4.setObjectName("rb4")
        self.horizontalLayout.addWidget(self.rb4)
        self.rb1.setCheckable(False)  #disabling the selection buttons 
        self.rb2.setCheckable(False)
        self.rb3.setCheckable(False)
        self.rb4.setCheckable(False)
        self.verticalLayout.addWidget(self.groupBox)
        self.listWid1 = QtWidgets.QListWidget(self.centralwidget)
        self.listWid1.setObjectName("listWid1")
        self.verticalLayout.addWidget(self.listWid1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_2.addWidget(self.label_8)
        self.le5 = QtWidgets.QLineEdit(self.centralwidget)
        self.le5.setObjectName("le5")
        self.horizontalLayout_2.addWidget(self.le5)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5.addLayout(self.verticalLayout)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem5)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.label_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_7.addWidget(self.label_7)
        self.le7 = QtWidgets.QLineEdit(self.centralwidget)
        self.le7.setObjectName("le7")
        self.horizontalLayout_7.addWidget(self.le7)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        spacerItem6 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_2.addItem(spacerItem6)
        self.listWid2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWid2.setObjectName("listWid2")
        self.verticalLayout_2.addWidget(self.listWid2)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_6.addWidget(self.label_9)
        self.le6 = QtWidgets.QLineEdit(self.centralwidget)
        self.le6.setObjectName("le6")
        self.horizontalLayout_6.addWidget(self.le6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_5.addLayout(self.verticalLayout_2)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem7)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem8)
        self.b1 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.b1.setFont(font)
        self.b1.setObjectName("b1")
        self.horizontalLayout_8.addWidget(self.b1)
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem9)
        self.verticalLayout_3.addLayout(self.horizontalLayout_8)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 908, 27))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(mainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionOpen_Team = QtWidgets.QAction(mainWindow)
        self.actionOpen_Team.setObjectName("actionOpen_Team")
        self.actionSave_Team = QtWidgets.QAction(mainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionEvaluate_Team = QtWidgets.QAction(mainWindow)
        self.actionEvaluate_Team.setObjectName("actionEvaluate_Team")
        self.menuManage_Teams.addAction(self.actionNew_Team)
        self.menuManage_Teams.addAction(self.actionOpen_Team)
        self.menuManage_Teams.addAction(self.actionSave_Team)
        self.menuManage_Teams.addAction(self.actionEvaluate_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.retranslateUi(mainWindow)
        self.b1.clicked.connect(mainWindow.close) # type: ignore #closes the app; created this eventhandler method in QtDesigner
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        self.menuManage_Teams.triggered[QtWidgets.QAction].connect(self.menufunc)    #when manageteams menu option is clicked

        self.rb1.toggled.connect(self.ctg)                            #when radio button BAT is pressed
        self.rb2.toggled.connect(self.ctg)                            #when radio button BOW is pressed
        self.rb3.toggled.connect(self.ctg)                            #when radio button AR is pressed
        self.rb4.toggled.connect(self.ctg)                            #when radio button WK is pressed

        self.bat = 4                                                  #initializing the value of bat,bow,wkt,ar,avl & used
        self.bow = 3
        self.ar = 3
        self.wkt = 1
        self.avl = 1000
        self.used = 0
        
        self.listWid1.itemDoubleClicked.connect(self.removelist1)     #when list item in listwid1 is double clicked
        self.listWid2.itemDoubleClicked.connect(self.removelist2)     #when list item in listwid1 is double clicked
    
    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Fantasy Cricket"))
        self.label.setText(_translate("mainWindow", "Batsmen (BAT)"))
        self.label_2.setText(_translate("mainWindow", "Bowlers (BOW)"))
        self.label_3.setText(_translate("mainWindow", "AllRounders (AR)"))
        self.label_4.setText(_translate("mainWindow", "Wicket-keeper (WK)"))
        self.label_5.setText(_translate("mainWindow", "Categories:"))
        self.rb1.setText(_translate("mainWindow", "BAT"))
        self.rb2.setText(_translate("mainWindow", "BOW"))
        self.rb3.setText(_translate("mainWindow", "AR"))
        self.rb4.setText(_translate("mainWindow", "WK"))
        self.label_8.setText(_translate("mainWindow", "Points Available:"))
        self.label_6.setText(_translate("mainWindow", "Selections:"))
        self.label_7.setText(_translate("mainWindow", "Team Name:"))
        self.label_9.setText(_translate("mainWindow", "Points Used:"))
        self.b1.setText(_translate("mainWindow", "              Exit Application            "))
        self.menuManage_Teams.setTitle(_translate("mainWindow", "Manage Teams"))
        self.actionNew_Team.setText(_translate("mainWindow", "New Team"))
        self.actionOpen_Team.setText(_translate("mainWindow", "Open Team"))
        self.actionSave_Team.setText(_translate("mainWindow", "Save Team"))
        self.actionEvaluate_Team.setText(_translate("mainWindow", "Evaluate Team"))

    def menufunc(self,action):
        txt=(action.text())
        if txt=="New Team":                                           #newteam clicked
            self.bat=4
            self.bow=3
            self.ar=3
            self.wkt=1
            self.used=0
            self.avl=1000
            self.listWid1.clear()                                     #clear list widget1 
            self.listWid2.clear()                                     #clear list widget2
            text,name=QtWidgets.QInputDialog.getText(mainWindow,"Team","Enter name of team:") #dialog box for entering team name
            
            if name==True:
                if len(text)!=NULL:
                  self.le7.setText(str(text))                         
                  self.rb1.setCheckable(True)                         #enabling the selection buttons
                  self.rb2.setCheckable(True)
                  self.rb3.setCheckable(True)
                  self.rb4.setCheckable(True)
                  self.showvalues()                                   #display values

        if txt == 'Save Team':                                        #save team clicked
            count = self.listWid2.count()                             #count players in list2
            selected = ""
            for i in range(count):
                selected += self.listWid2.item(i).text()
                if i < count:
                    selected += ","
            self.saveteam(self.le7.text(), selected, self.used)       #calling saveteam function 

        if txt == 'Open Team':                                        #open team clicked
            self.bat = 0
            self.bow = 0
            self.ar = 0
            self.wkt = 0
            self.avl = 1000
            self.used = 0
            self.listWid1.clear()                                     #clear list widget1 when open team is selected
            self.listWid2.clear()                                     #clear list widget2
            self.showvalues()
            self.openteam()                                           #calling openteam function 
            
        if txt == 'Evaluate Team':                                    #evaluate team clicked
            from Evaluate import Ui_Form                              #execute Evaluate.py
            Form = QtWidgets.QDialog()
            ui = Ui_Form()
            ui.setupUi(Form)
            Form.exec()
 
    def showvalues(self):                                             #to display values in the linedit fields 
        self.le1.setText(str(self.bat))
        self.le2.setText(str(self.bow))
        self.le3.setText(str(self.ar))
        self.le4.setText(str(self.wkt))
        self.le5.setText(str(self.avl))
        self.le6.setText(str(self.used))
    
    def ctg(self):                                                   #sets various categories to fill list1 with players of given ctg
        ctgr=''
        if self.rb1.isChecked()==True:
            ctgr='BAT'
        if self.rb2.isChecked()==True:
            ctgr='BOW'
        if self.rb3.isChecked()==True:
            ctgr='AR'
        if self.rb4.isChecked()==True:
            ctgr='WK'
        self.fillList(ctgr)

    def fillList(self,ctgr):                                         #it fills the list according to the button pressed/ctg assigned
        
        self.listWid1.clear()                                        #clear list widget1
        sql="select player from stats where ctg='"+ctgr+"';"         #sql command to fetch data from database
        players=cur.execute(sql)
        for row in players:
            selected=[]
            for i in range(self.listWid2.count()):
                selected.append(self.listWid2.item(i).text())       #checks if player is already present in listwid2
            if row[0] not in selected:                              #if not present it is added to listwid1           
                self.listWid1.addItem(row[0])
    
    def removelist1(self,item):                                     #removes item from list1 and adds to list2
    
        if self.rb1.isChecked()==True:
            ctgr='BAT'
        if self.rb2.isChecked()==True:
            ctgr='BOW'
        if self.rb3.isChecked()==True:
            ctgr='AR'
        if self.rb4.isChecked()==True:
            ctgr='WK'
        ret=self.criteria(ctgr,item)                                #it checks whether the criteria for team selection is followed
        if ret==True:                                               #if the condition is true(criteria followed)
            self.listWid1.takeItem(self.listWid1.row(item))
            self.listWid2.addItem(item.text())
            self.showvalues()                                       #display values
    
    def criteria(self,ctgr,item):                                   #check conditions
        msg=''
        if ctgr=="BAT" and self.bat<1:
            msg="More than 4 Batsmen are not allowed"
        if ctgr=="BOW" and self.bow<1:
            msg="More than 3 Bowlers are not allowed"
        if ctgr=="AR" and self.ar<1:
            msg="More than 3 All Rounders are not allowed"
        if ctgr=="WK" and self.wkt<1:
            msg="More than 1 Wicketkeeper are not allowed"
        if msg!='':
            self.popup(msg)                                           #shows dialog box when condition is not met
            return False
        
        sql="select value from stats where player='"+item.text()+"'"  #sql commnad to get data from database
        value=cur.execute(sql)
        row=value.fetchone()
        
        self.avl-=int(row[0])                                        #calculating points if above condition is met
        self.used+=int(row[0])

        if self.avl<=0:                                              
            self.avl+=int(row[0])                                    #recalculating points if this condition is not met
            self.used-=int(row[0])
            msg="Points have been exhausted!!"
            self.popup(msg)                                          #shows dialog box when points has been exhausted
            return False

        if ctgr=="BAT":self.bat=self.bat-1                          #finally calculating remaining selections of ctg
        if ctgr=="BOW":self.bow=self.bow-1
        if ctgr=="AR":self.ar=self.ar-1
        if ctgr=="WK":self.wkt=self.wkt-1
        
        return True

    def popup(self,msg):                                            #its function is to display message using dbox when required
        Dialog=QtWidgets.QMessageBox()
        Dialog.setText(msg)
        Dialog.setWindowTitle("Fantasy Cricket")
        ret=Dialog.exec()

    def removelist2(self,item):                                     #removes item from list1 and adds to list2
        self.listWid2.takeItem(self.listWid2.row(item))
        stats=cur.execute("select player,value,ctg from stats where player='"+item.text()+"'") #sql command to fetch details
        row=stats.fetchone()
        self.avl=self.avl+int(row[1])
        self.used=self.used-int(row[1])
        ctgr=row[2]
        if ctgr=="BAT":                                              #conditions for adding players back to list1
            self.bat+=1
            if self.rb1.isChecked()==True:
                self.listWid1.addItem(item.text())
        if ctgr=="BOW":                                                         
            self.bow+=1
            if self.rb2.isChecked()==True:
                self.listWid1.addItem(item.text())
        if ctgr=="AR":                                                          
            self.ar+=1
            if self.rb3.isChecked()==True:
                self.listWid1.addItem(item.text())
        if ctgr=="WK":                                                        
            self.wkt+=1
            if self.rb4.isChecked()==True:
                self.listWid1.addItem(item.text())
        self.showvalues()

    def saveteam(self, name, players, value):                            #saveteam function
               if self.bat + self.bow + self.ar + self.wkt!= 0:          #check total number of players
                  self.popup("Insufficient players")
                  return

               sql = "INSERT INTO teams (name,players,value) VALUES ('" + name + "','" + players + "','" + str(value) + "');" #sql command
               try:                                              
                  cur.execute(sql)                                      #saving team
                  self.popup("Team Saved Succesfully")
                  fc.commit()
               except:                                                  #exception handling
                  self.popup("Error in Operation")
                  fc.rollback()
    
    def openteam(self):                                                 #openteam funtion
        sql = "select name from teams;"                                 #sql command
        nm = cur.execute(sql)
        teams = []
        for row in nm:
            teams.append(row[0])
        team, ok = QtWidgets.QInputDialog.getItem(mainWindow, "Open Team", "Choose A Team", teams, 0, False) #dialog box for entering team name to be open
        if ok and team:
            self.le7.setText(team)
        sql1 = "SELECT players,value from teams where name='" + team + "';"     #sql command
        stats = cur.execute(sql1)
        row = stats.fetchone()
        selected = row[0].split(',')
        self.listWid2.addItems(selected)
        self.used = row[1]
        self.avl = 1000 - row[1]
        
        self.showvalues()

if __name__ == "__main__":
    import sys
    import sqlite3
    fc=sqlite3.connect('MyCricket.db')                                  #connecting to a database
    cur=fc.cursor()
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
